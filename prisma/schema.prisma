generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model countries {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(64)
  code           Int              @unique
  municipalities municipalities[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model establishments {
  id         BigInt    @id @default(autoincrement())
  name       String    @db.VarChar(128)
  income     Decimal   @db.Decimal(13, 2)
  employees  Int       @default(0)
  owner_id   BigInt
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  updated_by BigInt
  merchants  merchants @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [updated_by], references: [id], onUpdate: NoAction)

  @@index([owner_id], map: "idx_establishments_owner_id")
  @@index([updated_by], map: "idx_establishments_updated_by")
}

model merchants {
  id              BigInt           @id @default(autoincrement())
  email           String?          @unique @db.VarChar(256)
  phone           String?          @unique @db.VarChar(10)
  registered_at   DateTime         @default(now()) @db.Timestamp(6)
  updated_at      DateTime         @default(now()) @db.Timestamp(6)
  status_id       Int
  subject_id      BigInt
  municipality_id Int
  updater_id      BigInt
  establishments  establishments[]
  municipalities  municipalities   @relation(fields: [municipality_id], references: [id], onUpdate: NoAction)
  statuses        statuses         @relation(fields: [status_id], references: [id], onUpdate: NoAction)
  subjects        subjects         @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users           users            @relation(fields: [updater_id], references: [id], onUpdate: NoAction)

  @@index([municipality_id], map: "idx_merchants_municipality_id")
  @@index([registered_at(sort: Desc)], map: "idx_merchants_registered_at")
  @@index([status_id], map: "idx_merchants_status_id")
  @@index([subject_id], map: "idx_merchants_subject_id")
  @@index([updater_id], map: "idx_merchants_updater_id")
}

model municipalities {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(64)
  country_id Int
  merchants  merchants[]
  countries  countries   @relation(fields: [country_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([country_id], map: "idx_municipalities_country_id")
}

model roles {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(32)
  description String? @default("sin descripcion") @db.VarChar(500)
  users       users[]
}

model statuses {
  id        Int         @id @default(autoincrement())
  name      String      @unique @db.VarChar(32)
  merchants merchants[]

  @@index([name], map: "idx_statuses_name")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model subjects {
  id        BigInt      @id @default(autoincrement())
  name      String      @db.VarChar(256)
  type      String      @db.Char(1)
  merchants merchants[]
  users     users[]

  @@index([name], map: "idx_subjects_name")
}

model users {
  id             BigInt           @id @default(autoincrement())
  email          String           @unique @db.VarChar(256)
  password       String           @db.VarChar(255)
  subject_id     BigInt
  role_id        Int
  establishments establishments[]
  merchants      merchants[]
  roles          roles            @relation(fields: [role_id], references: [id], onUpdate: NoAction)
  subjects       subjects         @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([role_id], map: "idx_users_role_id")
  @@index([subject_id], map: "idx_users_subject_id")
}
